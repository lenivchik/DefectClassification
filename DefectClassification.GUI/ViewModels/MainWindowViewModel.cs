using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Input;
using Avalonia.Controls;
using Avalonia.Platform.Storage;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace DefectClassification.GUI.ViewModels
{
    public partial class MainWindowViewModel : ViewModelBase
    {
        [ObservableProperty]
        private string _filePath = string.Empty;

        [ObservableProperty]
        private double _lambdaValue = 10.0;

        [ObservableProperty]
        private bool _isStaticMode = true;

        [ObservableProperty]
        private bool _isDynamicMode = false;

        [ObservableProperty]
        private bool _createBackup = true;

        [ObservableProperty]
        private double _progressValue = 0;

        [ObservableProperty]
        private string _statusMessage = "Готов к работе";

        [ObservableProperty]
        private bool _isProcessing = false;

        [ObservableProperty]
        private bool _canProcess = false;

        public MainWindowViewModel()
        {
            // Initialize commands are auto-generated by source generators
        }

        [RelayCommand]
        private async Task SelectFile()
        {
            try
            {
                var topLevel = TopLevel.GetTopLevel(App.MainWindow);
                if (topLevel == null) return;

                var files = await topLevel.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
                {
                    Title = "Выберите Excel файл",
                    AllowMultiple = false,
                    FileTypeFilter = new[]
                    {
                        new FilePickerFileType("Excel Files")
                        {
                            Patterns = new[] { "*.xlsx" }
                        }
                    }
                });

                if (files.Count > 0)
                {
                    FilePath = files[0].Path.LocalPath;
                    CanProcess = !string.IsNullOrWhiteSpace(FilePath) && File.Exists(FilePath);
                    StatusMessage = $"Выбран файл: {Path.GetFileName(FilePath)}";
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"Ошибка выбора файла: {ex.Message}";
            }
        }

        [RelayCommand]
        private async Task ProcessFile()
        {
            if (string.IsNullOrWhiteSpace(FilePath) || !File.Exists(FilePath))
            {
                StatusMessage = "Пожалуйста, выберите файл";
                return;
            }

            IsProcessing = true;
            CanProcess = false;
            ProgressValue = 0;
            StatusMessage = "Начинаю обработку...";

            try
            {
                var processor = new Services.ExcelProcessor();

                var progress = new Progress<(int current, int total, string message)>(p =>
                {
                    ProgressValue = p.total > 0 ? (double)p.current / p.total * 100 : 0;
                    StatusMessage = p.message;
                });

                await Task.Run(() => processor.ProcessFile(
                    FilePath,
                    LambdaValue,
                    IsStaticMode,
                    CreateBackup,
                    progress));

                StatusMessage = "Обработка завершена успешно!";
                ProgressValue = 100;
            }
            catch (Exception ex)
            {
                StatusMessage = $"Ошибка: {ex.Message}";
                ProgressValue = 0;
            }
            finally
            {
                IsProcessing = false;
                CanProcess = !string.IsNullOrWhiteSpace(FilePath) && File.Exists(FilePath);
            }
        }

        partial void OnIsStaticModeChanged(bool value)
        {
            if (value)
            {
                IsDynamicMode = false;
            }
        }

        partial void OnIsDynamicModeChanged(bool value)
        {
            if (value)
            {
                IsStaticMode = false;
            }
        }
    }
}